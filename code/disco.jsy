import {MQTT_base} from './base.jsy'

export class MQTT_disco extends MQTT_base ::
  static from(pi_ctx, mqtt, url) ::
    return new this(pi_ctx)
      .with_mqtt(mqtt)
      .subscribe(url)

  subscribe(url) ::
    this.mqtt.on_topic @ url.pathname+':id',
      this._on_advert_pkt.bind(this)
    this.mqtt.subscribe(url.pathname + '#')
    return this.with @:
      url: new URL('.', url)
      db_adverts: new Map()
      db_chans: new Map()

  advert_from_pkt(pkt) ::
    return pkt.json()

  _on_advert_pkt(pkt, {id}) ::
    if 0 === pkt.payload.length ::
      this.db_adverts.delete(id)
      this.db_chans.delete(id)
      this.on_advert(id)
    else ::
      let advert = this.advert_from_pkt(pkt)
      this.db_adverts.set @ id, advert
      this.on_advert(id, advert)

  on_advert(pub_id, advert) ::
    //console.log @ 'advert:', advert, peer

  query_pub_id(query) :: return query.id_route

  // addDiscovery protocol {test, discover}
  test(query) :: return true
  async discover(query) ::
    let pub_id = await this.query_pub_id(query)
    let db_chans = this.db_chans
    let cur = db_chans.get(pub_id)
    if ! cur ::
      cur = this._use_advert(pub_id, query)
      db_chans.set(pub_id, cur)
    return cur

  on_connecting(id, advert) ::
    //console.log @ 'advert:', advert, peer

  // retries = 3
  // ms_backoff = 50
  async _use_advert(pub_id, query) ::
    let db_adverts = this.db_adverts,
        hub = query.router_ctx.hub,
        advert
    for let i=this.retries || 3; i>0; i-- ::
      advert = await db_adverts.get(pub_id)
      if advert :: break
      await hub.timeouts.add(this.ms_backoff || 50)

    return advert &&
      await this._channel_to(hub, pub_id, advert, query)

  async _channel_to(hub, pub_id, advert, query) ::
    if ! advert.conn ::
      return
    let chan = await hub.connect(advert.conn)
    let peer = await chan.peer_info

    this.db_chans.set(pub_id, chan)
    this.on_connect(pub_id, advert, peer, chan)
    return chan

  on_connect(pub_id, advert, peer, chan) ::
    //console.log @ 'connected to:', advert, peer

