import {MQTT_base} from './base.jsy'

export class MQTT_disco extends MQTT_base ::
  static from(pi_ctx, mqtt, url) ::
    return new this(pi_ctx)
      .with_mqtt(mqtt)
      .subscribe(url)

  subscribe(url) ::
    this.mqtt.sub_topic @
      url.pathname+':id'
      this._on_advert_pkt.bind(this)
    return this.with @:
      url: new URL('.', url)
      db_adverts: new Map()


  _advert_from_pkt(pkt) ::
    return pkt.json()

  _on_advert_pkt(pkt, {id}) ::
    if 0 === pkt.payload.length ::
      this.db_adverts.delete(id)
      this.on_advert(id)
    else ::
      let advert = this._advert_from_pkt(pkt)
      this.db_adverts.set @ id, advert
      this.on_advert(id, advert)

  // ms_duration = 500
  async _retry_db(pub_id, db, query) ::
    if ! db :: return
    let res, ts_until = Date.now() + (this.ms_duration || 500)
    while !res && !query.done && ts_until > Date.now() ::
      await query.timeouts.f_tick()
      res = await db.get(pub_id)
    return res


  _query_pub_id(query) :: return query.id_route

  // addDiscovery protocol {test, discover}
  test(query) :: return true
  async discover(query) ::
    let pub_id = await this._query_pub_id(query)
    this.on_discovering(pub_id, query)
    let advert = await this._retry_db @
      pub_id, this.db_adverts, query

    this.on_discovered(pub_id, advert, query)
    if ! advert :: return

    if advert.conn ::
      return query.answer @
        await this._channel_to @
          query.hub, pub_id, advert, query

    if advert.fwd ::
      return query.answer @
        await this._forward_to @
          pub_id, advert, query


  async _channel_to(hub, pub_id, advert, query) ::
    let conn = advert.conn
    if ! conn :: return

    this.on_connecting(pub_id, advert)
    let chan = await hub.connect(conn)
      .catch @ err => this.on_connect_error(pub_id, advert, err)

    if chan ::
      query.hub_router.addPeer(query.id_route, chan)
      query.answer(chan)

    this.on_connect(pub_id, advert, chan)
    return chan


  async _forward_to(pub_id, advert, query) ::
    let fwd = advert.fwd
    if ! fwd :: return

    let fn_route = await query.resolveRoute(fwd, true, true)
    if fn_route ::
      query.hub_router.addRoute(query.id_route, fn_route)

    this.on_forward(pub_id, advert, fn_route)
    return fn_route


  on_advert(pub_id, advert) ::
    //console.log @ 'advert:', pub_id, advert
  on_discovering(pub_id, query) ::
    //console.log @ 'discovering:', pub_id
  on_discovered(pub_id, advert, query) ::
    //console.log @ 'discovered:', pub_id, advert
  on_forward(pub_id, advert, route) ::
    //console.log @ 'forward:', pub_id, advert, route
  on_connecting(pub_id, advert) ::
    //console.log @ 'connecting:', pub_id, advert
  on_connect(pub_id, advert, chan) ::
    //console.log @ 'connected to:', pub_id, advert
  on_connect_error(pub_id, advert, err) ::
    console.warn @ err

