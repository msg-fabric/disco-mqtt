import {MQTT_base} from './base.jsy'

export class MQTT_advert extends MQTT_base ::
  static from(pi_ctx, mqtt, url_base, id, status) ::
    return new this(pi_ctx)
      .with @: id, url_base, status
      .with_mqtt(mqtt)
      .advertize()

  as_pub_id(id) :: return id

  async _mqtt_connect(mqtt) ::
    let pub_id = await this.as_pub_id(this.id)
    let url = new URL(pub_id, this.url_base)
    let topic = url.pathname
    this.with @: pub_id, url, topic

    return mqtt.connect @:
      client_id: `mf-${topic.split('/').pop()}-advert`
      // last will: remove key upon disconnect
      will: @{} qos: 1, retain: true, topic, paylod: ''

  async advertize() ::
    try ::
      await this._conn
    catch err :: return {err, advert: this}

    let {mqtt, pub_id, topic, status} = this
    try ::
      if status ::
        await mqtt.obj_store(topic, status, this.mqtt_obj_encode)
      return {ok: !!status, pub_id, advert: this}
    catch err ::
      return {err, pub_id, advert: this}

  // mqtt_obj_encode = obj => JSON.stringify(obj)

