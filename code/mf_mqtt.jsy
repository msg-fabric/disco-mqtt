import mqtt_client from 'u8-mqtt/esm/node/v4.mjs'

export const pfx_presence = `msg-fabric-presence/`

export async function mqtt_start(pub_id, conn, extra) ::
  // use reconnectable mqtt client id
  let json = @{} ...extra
    ts0: new Date().toISOString()
    conn: conn.asURL()

  let topic = pfx_presence + pub_id
  let client_id = `msgfab-${pub_id}-mf`

  let mqtt = mqtt_client().with_tcp(9883, '127.0.0.1')
  await mqtt.connect @:
    client_id
    will: @{}
      qos: 1, retain: true,
      topic, paylod: '' // remove key as last will upon disconnect

  mqtt.subscribe @ pfx_presence+'#'

  update_presence()
  let tid = setInterval @ update_presence, 30000 //120000
  if tid.unref :: tid.unref()
  return mqtt

  async function update_presence() ::
    try ::
      json.ts = new Date().toISOString()
      await mqtt.json_store(topic, json)
    catch err ::
      console.warn @ err


export function disco_mqtt(hub, mqtt) ::
  let known = new Map()
  let conns = new Map()

  mqtt.on_topic @ pfx_presence+':id',
    (pkt, params) => ::
      let peer = pkt.json()
      if peer ::
        known.set(params.id, peer)
      else ::
        known.delete(params.id)
        conns.delete(params.id)

  return discover_mqtt

  function discover_mqtt(query) ::
    let {id_route} = query
    let cur = conns.get(query.key)
    if ! cur ::
      cur = conn_mqtt(id_route)
      conns.set(id_route, cur)
     return cur

  async function conn_mqtt(id_route) ::
    let peer, chan
    for let i=3; i>0; i-- ::
      peer = known.get(id_route)
      if peer :: break
      await hub.timeouts.add(100)

    if peer ::
      //console.log @ 'connecting to:', peer.conn
      chan = await hub.connect(peer.conn)
      let info = await chan.peer_info
      //console.log @ 'connected to:', peer.conn, info
    return chan


export async function mf_mqtt_demo(hub, mqtt) ::
  let me = `IAM -- ${hub.local.id_route}`

  mqtt.on_topic @ pfx_presence+':id',
    (pkt, params, ctx) => ::
      if params.id != hub.local.id_route ::
        console.log @ "SAW:", params, pkt.json()
      else console.log @ "SAW myself!", params, pkt.json()

  mqtt.on_topic @ pfx_presence+':id',
    async (pkt, params, ctx) => ::
      await hub.send @ [params.id, 'hello'],
        @{} msg: `hello from ${me}`
            myself: params.id == hub.local.id_route

